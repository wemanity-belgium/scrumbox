package com.wemanity.scrumbox.android.db.entity;

import com.wemanity.scrumbox.android.db.dao.DaoSession;
import com.wemanity.scrumbox.android.db.dao.impl.ParticipantDao;
import com.wemanity.scrumbox.android.db.dao.impl.ParticipationDao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PARTICIPATION.
 */
public class Participation implements Entity {

    private Long id;
    private Integer personaltime;
    private long participantid;
    private long dailyoccurrenceid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ParticipationDao myDao;

    private Participant participant;
    private Long participant__resolvedKey;


    public Participation() {
    }

    public Participation(Long id) {
        this.id = id;
    }

    public Participation(Long id, Integer personaltime, long participantid, long dailyoccurrenceid) {
        this.id = id;
        this.personaltime = personaltime;
        this.participantid = participantid;
        this.dailyoccurrenceid = dailyoccurrenceid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getParticipationDao() : null;
    }

    @Override
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getPersonaltime() {
        return personaltime;
    }

    public void setPersonaltime(Integer personaltime) {
        this.personaltime = personaltime;
    }

    public long getParticipantid() {
        return participantid;
    }

    public void setParticipantid(long participantid) {
        this.participantid = participantid;
    }

    public long getDailyoccurrenceid() {
        return dailyoccurrenceid;
    }

    public void setDailyoccurrenceid(long dailyoccurrenceid) {
        this.dailyoccurrenceid = dailyoccurrenceid;
    }

    /** To-one relationship, resolved on first access. */
    public Participant getParticipant() {
        long __key = this.participantid;
        if (participant__resolvedKey == null || !participant__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ParticipantDao targetDao = daoSession.getParticipantDao();
            Participant participantNew = targetDao.load(__key);
            synchronized (this) {
                participant = participantNew;
            	participant__resolvedKey = __key;
            }
        }
        return participant;
    }

    public void setParticipant(Participant participant) {
        if (participant == null) {
            throw new DaoException("To-one property 'participantid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.participant = participant;
            participantid = participant.getId();
            participant__resolvedKey = participantid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
