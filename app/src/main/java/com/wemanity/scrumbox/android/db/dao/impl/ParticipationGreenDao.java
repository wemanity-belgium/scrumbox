package com.wemanity.scrumbox.android.db.dao.impl;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.wemanity.scrumbox.android.db.dao.DaoSession;
import com.wemanity.scrumbox.android.db.dao.ParticipationDao;
import com.wemanity.scrumbox.android.db.entity.Participation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PARTICIPATION.
*/
public class ParticipationGreenDao extends AbstractDao<Participation, Long> implements ParticipationDao {

    public static final String TABLENAME = "PARTICIPATION";

    /**
     * Properties of entity Participation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Personaltime = new Property(1, Integer.class, "personaltime", false, "PERSONALTIME");
        public final static Property Participantid = new Property(2, long.class, "participantid", false, "PARTICIPANTID");
        public final static Property Dailyoccurrenceid = new Property(3, long.class, "dailyoccurrenceid", false, "DAILYOCCURRENCEID");
    };

    private DaoSession daoSession;

    private Query<Participation> dailyOccurrence_ParticipationsQuery;

    public ParticipationGreenDao(DaoConfig config) {
        super(config);
    }
    
    public ParticipationGreenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PARTICIPATION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PERSONALTIME' INTEGER," + // 1: personaltime
                "'PARTICIPANTID' INTEGER NOT NULL ," + // 2: participantid
                "'DAILYOCCURRENCEID' INTEGER NOT NULL );"); // 3: dailyoccurrenceid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PARTICIPATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Participation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer personaltime = entity.getPersonaltime();
        if (personaltime != null) {
            stmt.bindLong(2, personaltime);
        }
        stmt.bindLong(3, entity.getParticipantid());
        stmt.bindLong(4, entity.getDailyoccurrenceid());
    }

    @Override
    protected void attachEntity(Participation entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Participation readEntity(Cursor cursor, int offset) {
        Participation entity = new Participation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // personaltime
            cursor.getLong(offset + 2), // participantid
            cursor.getLong(offset + 3) // dailyoccurrenceid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Participation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPersonaltime(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setParticipantid(cursor.getLong(offset + 2));
        entity.setDailyoccurrenceid(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Participation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Participation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "participations" to-many relationship of DailyOccurrence. */
    public List<Participation> _queryDailyOccurrence_Participations(long dailyoccurrenceid) {
        synchronized (this) {
            if (dailyOccurrence_ParticipationsQuery == null) {
                QueryBuilder<Participation> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Dailyoccurrenceid.eq(null));
                dailyOccurrence_ParticipationsQuery = queryBuilder.build();
            }
        }
        Query<Participation> query = dailyOccurrence_ParticipationsQuery.forCurrentThread();
        query.setParameter(0, dailyoccurrenceid);
        return query.list();
    }

}
