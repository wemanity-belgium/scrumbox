package com.wemanity.scrumbox.android.db.entity;

import java.util.List;

import com.wemanity.scrumbox.android.db.dao.impl.DailyOccurrenceDao;
import com.wemanity.scrumbox.android.db.dao.DaoSession;
import com.wemanity.scrumbox.android.db.dao.impl.ParticipationDao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DAILY_OCCURRENCE.
 */
public class DailyOccurrence implements Entity {

    private Long id;
    private java.util.Date dateexecuted;
    private Long totaltime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DailyOccurrenceDao myDao;

    private List<Participation> participations;

    public DailyOccurrence() {
    }

    public DailyOccurrence(Long id) {
        this.id = id;
    }

    public DailyOccurrence(Long id, java.util.Date dateexecuted, Long totaltime) {
        this.id = id;
        this.dateexecuted = dateexecuted;
        this.totaltime = totaltime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDailyOccurrenceDao() : null;
    }

    @Override
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getDateexecuted() {
        return dateexecuted;
    }

    public void setDateexecuted(java.util.Date dateexecuted) {
        this.dateexecuted = dateexecuted;
    }

    public Long getTotaltime() {
        return totaltime;
    }

    public void setTotaltime(Long totaltime) {
        this.totaltime = totaltime;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Participation> getParticipations() {
        if (participations == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ParticipationDao targetDao = daoSession.getParticipationDao();
            List<Participation> participationsNew = targetDao._queryDailyOccurrence_Participations(id);
            synchronized (this) {
                if(participations == null) {
                    participations = participationsNew;
                }
            }
        }
        return participations;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetParticipations() {
        participations = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
