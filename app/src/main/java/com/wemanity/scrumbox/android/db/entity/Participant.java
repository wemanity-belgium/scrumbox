package com.wemanity.scrumbox.android.db.entity;

import com.wemanity.scrumbox.android.db.dao.impl.DailyGreenDao;
import com.wemanity.scrumbox.android.db.dao.DaoSession;
import com.wemanity.scrumbox.android.db.dao.impl.MemberGreenDao;
import com.wemanity.scrumbox.android.db.dao.impl.ParticipantGreenDao;
import com.wemanity.scrumbox.android.db.dao.impl.RoleGreenDao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PARTICIPANT.
 */
public class Participant {

    private Long id;
    private long memberid;
    private long roleid;
    private long dailyid;
    private Boolean excludemonday;
    private Boolean excludethuesday;
    private Boolean excludewednesday;
    private Boolean excludethursday;
    private Boolean excludefriday;
    private Boolean excludesaturday;
    private Boolean excludesunday;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ParticipantGreenDao myDao;

    private Member member;
    private Long member__resolvedKey;

    private Role role;
    private Long role__resolvedKey;

    private Daily daily;
    private Long daily__resolvedKey;


    public Participant() {
    }

    public Participant(Long id) {
        this.id = id;
    }

    public Participant(Long id, long memberid, long roleid, long dailyid, Boolean excludemonday, Boolean excludethuesday, Boolean excludewednesday, Boolean excludethursday, Boolean excludefriday, Boolean excludesaturday, Boolean excludesunday) {
        this.id = id;
        this.memberid = memberid;
        this.roleid = roleid;
        this.dailyid = dailyid;
        this.excludemonday = excludemonday;
        this.excludethuesday = excludethuesday;
        this.excludewednesday = excludewednesday;
        this.excludethursday = excludethursday;
        this.excludefriday = excludefriday;
        this.excludesaturday = excludesaturday;
        this.excludesunday = excludesunday;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getParticipantDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getMemberid() {
        return memberid;
    }

    public void setMemberid(long memberid) {
        this.memberid = memberid;
    }

    public long getRoleid() {
        return roleid;
    }

    public void setRoleid(long roleid) {
        this.roleid = roleid;
    }

    public long getDailyid() {
        return dailyid;
    }

    public void setDailyid(long dailyid) {
        this.dailyid = dailyid;
    }

    public Boolean getExcludemonday() {
        return excludemonday;
    }

    public void setExcludemonday(Boolean excludemonday) {
        this.excludemonday = excludemonday;
    }

    public Boolean getExcludethuesday() {
        return excludethuesday;
    }

    public void setExcludethuesday(Boolean excludethuesday) {
        this.excludethuesday = excludethuesday;
    }

    public Boolean getExcludewednesday() {
        return excludewednesday;
    }

    public void setExcludewednesday(Boolean excludewednesday) {
        this.excludewednesday = excludewednesday;
    }

    public Boolean getExcludethursday() {
        return excludethursday;
    }

    public void setExcludethursday(Boolean excludethursday) {
        this.excludethursday = excludethursday;
    }

    public Boolean getExcludefriday() {
        return excludefriday;
    }

    public void setExcludefriday(Boolean excludefriday) {
        this.excludefriday = excludefriday;
    }

    public Boolean getExcludesaturday() {
        return excludesaturday;
    }

    public void setExcludesaturday(Boolean excludesaturday) {
        this.excludesaturday = excludesaturday;
    }

    public Boolean getExcludesunday() {
        return excludesunday;
    }

    public void setExcludesunday(Boolean excludesunday) {
        this.excludesunday = excludesunday;
    }

    /** To-one relationship, resolved on first access. */
    public Member getMember() {
        long __key = this.memberid;
        if (member__resolvedKey == null || !member__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MemberGreenDao targetDao = daoSession.getMemberDao();
            Member memberNew = targetDao.load(__key);
            synchronized (this) {
                member = memberNew;
            	member__resolvedKey = __key;
            }
        }
        return member;
    }

    public void setMember(Member member) {
        if (member == null) {
            throw new DaoException("To-one property 'memberid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.member = member;
            memberid = member.getId();
            member__resolvedKey = memberid;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Role getRole() {
        long __key = this.roleid;
        if (role__resolvedKey == null || !role__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RoleGreenDao targetDao = daoSession.getRoleDao();
            Role roleNew = targetDao.load(__key);
            synchronized (this) {
                role = roleNew;
            	role__resolvedKey = __key;
            }
        }
        return role;
    }

    public void setRole(Role role) {
        if (role == null) {
            throw new DaoException("To-one property 'roleid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.role = role;
            roleid = role.getId();
            role__resolvedKey = roleid;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Daily getDaily() {
        long __key = this.dailyid;
        if (daily__resolvedKey == null || !daily__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DailyGreenDao targetDao = daoSession.getDailyDao();
            Daily dailyNew = targetDao.load(__key);
            synchronized (this) {
                daily = dailyNew;
            	daily__resolvedKey = __key;
            }
        }
        return daily;
    }

    public void setDaily(Daily daily) {
        if (daily == null) {
            throw new DaoException("To-one property 'dailyid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.daily = daily;
            dailyid = daily.getId();
            daily__resolvedKey = dailyid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
