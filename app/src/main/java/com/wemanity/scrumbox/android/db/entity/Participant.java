package com.wemanity.scrumbox.android.db.entity;

import com.wemanity.scrumbox.android.db.dao.DaoSession;
import com.wemanity.scrumbox.android.db.dao.impl.DailyDao;
import com.wemanity.scrumbox.android.db.dao.impl.MemberDao;
import com.wemanity.scrumbox.android.db.dao.impl.ParticipantDao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PARTICIPANT.
 */
public class Participant implements Entity {

    private Long id;
    private long memberid;
    private long dailyid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ParticipantDao myDao;

    private Member member;
    private Long member__resolvedKey;

    private Daily daily;
    private Long daily__resolvedKey;


    public Participant() {
    }

    public Participant(Long id) {
        this.id = id;
    }

    public Participant(Long id, long memberid, long dailyid) {
        this.id = id;
        this.memberid = memberid;
        this.dailyid = dailyid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getParticipantDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getMemberid() {
        return memberid;
    }

    public void setMemberid(long memberid) {
        this.memberid = memberid;
    }

    public long getDailyid() {
        return dailyid;
    }

    public void setDailyid(long dailyid) {
        this.dailyid = dailyid;
    }

    /** To-one relationship, resolved on first access. */
    public Member getMember() {
        long __key = this.memberid;
        if (member__resolvedKey == null || !member__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MemberDao targetDao = daoSession.getMemberDao();
            Member memberNew = targetDao.load(__key);
            synchronized (this) {
                member = memberNew;
                member__resolvedKey = __key;
            }
        }
        return member;
    }

    public void setMember(Member member) {
        if (member == null) {
            throw new DaoException("To-one property 'memberid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.member = member;
            memberid = member.getId();
            member__resolvedKey = memberid;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Daily getDaily() {
        long __key = this.dailyid;
        if (daily__resolvedKey == null || !daily__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DailyDao targetDao = daoSession.getDailyDao();
            Daily dailyNew = targetDao.load(__key);
            synchronized (this) {
                daily = dailyNew;
                daily__resolvedKey = __key;
            }
        }
        return daily;
    }

    public void setDaily(Daily daily) {
        if (daily == null) {
            throw new DaoException("To-one property 'dailyid' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.daily = daily;
            dailyid = daily.getId();
            daily__resolvedKey = dailyid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
